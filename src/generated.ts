// Generated by @wagmi/cli@1.0.0 on 5/19/2023 at 5:28:18 PM
import {
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  useContractRead,
  UseContractReadConfig,
} from 'wagmi'
import {
  WriteContractMode,
  PrepareWriteContractResult,
  ReadContractResult,
} from 'wagmi/actions'

import {
  getContract,
  GetContractArgs,
  writeContract,
  WriteContractArgs,
  WriteContractPreparedArgs,
  WriteContractUnpreparedArgs,
  prepareWriteContract,
  PrepareWriteContractConfig,
  watchContractEvent,
  WatchContractEventConfig,
  WatchContractEventCallback,
  readContract,
  ReadContractConfig,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FallbackManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const fallbackManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'handler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangedFallbackHandler',
  },
  { stateMutability: 'nonpayable', type: 'fallback' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'handler', internalType: 'address', type: 'address' }],
    name: 'setFallbackHandler',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BaseGuard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const baseGuardABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'success', internalType: 'bool', type: 'bool' },
    ],
    name: 'checkAfterExecution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      {
        name: 'refundReceiver',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
      { name: 'msgSender', internalType: 'address', type: 'address' },
    ],
    name: 'checkTransaction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Guard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const guardABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'success', internalType: 'bool', type: 'bool' },
    ],
    name: 'checkAfterExecution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      {
        name: 'refundReceiver',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
      { name: 'msgSender', internalType: 'address', type: 'address' },
    ],
    name: 'checkTransaction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GuardManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const guardManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'guard',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangedGuard',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'guard', internalType: 'address', type: 'address' }],
    name: 'setGuard',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProxyCreationCallback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProxyCreationCallbackABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proxy', internalType: 'contract SafeProxy', type: 'address' },
      { name: '_singleton', internalType: 'address', type: 'address' },
      { name: 'initializer', internalType: 'bytes', type: 'bytes' },
      { name: 'saltNonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proxyCreated',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISignatureValidator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSignatureValidatorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_data', internalType: 'bytes', type: 'bytes' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ModuleManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const moduleManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DisabledModule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'EnabledModule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ExecutionFromModuleFailure',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ExecutionFromModuleSuccess',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevModule', internalType: 'address', type: 'address' },
      { name: 'module', internalType: 'address', type: 'address' },
    ],
    name: 'disableModule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'module', internalType: 'address', type: 'address' }],
    name: 'enableModule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
    ],
    name: 'execTransactionFromModule',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
    ],
    name: 'execTransactionFromModuleReturnData',
    outputs: [
      { name: 'success', internalType: 'bool', type: 'bool' },
      { name: 'returnData', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'start', internalType: 'address', type: 'address' },
      { name: 'pageSize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getModulesPaginated',
    outputs: [
      { name: 'array', internalType: 'address[]', type: 'address[]' },
      { name: 'next', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'module', internalType: 'address', type: 'address' }],
    name: 'isModuleEnabled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NativeCurrencyPaymentFallback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const nativeCurrencyPaymentFallbackABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SafeReceived',
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnerManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownerManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AddedOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'threshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ChangedThreshold',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemovedOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addOwnerWithThreshold',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_threshold', internalType: 'uint256', type: 'uint256' }],
    name: 'changeThreshold',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevOwner', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevOwner', internalType: 'address', type: 'address' },
      { name: 'oldOwner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'swapOwner',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CounterTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterTestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract Registry', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'testRegistryOwnerIsRootRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'testRootRoleOwnerIsSender',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Registry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      { name: 'threshold', internalType: 'uint256', type: 'uint256' },
      { name: '_proxyFactory', internalType: 'address', type: 'address' },
      { name: '_safeSingleton', internalType: 'address', type: 'address' },
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'RegistryCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_name', internalType: 'string', type: 'string', indexed: false },
      {
        name: '_role',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RoleAdded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addRole',
    outputs: [
      {
        name: 'info',
        internalType: 'struct RoleInfo',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'addr', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_role', internalType: 'address', type: 'address' }],
    name: 'getRole',
    outputs: [
      {
        name: 'role',
        internalType: 'struct RoleInfo',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'addr', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRoles',
    outputs: [
      {
        name: '_roles',
        internalType: 'struct RoleInfo[]',
        type: 'tuple[]',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'addr', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'roleInfo',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'addr', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'roleSafes',
    outputs: [
      { name: '', internalType: 'contract SafeProxy', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegistryFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registryFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_proxyFactory', internalType: 'address', type: 'address' },
      { name: '_safeSingleton', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'registry',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RegistryCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      { name: 'threshold', internalType: 'uint256', type: 'uint256' },
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deployRegistry',
    outputs: [
      { name: 'registry', internalType: 'contract Registry', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_user', internalType: 'address', type: 'address' }],
    name: 'getUserRegistries',
    outputs: [
      {
        name: '_registries',
        internalType: 'contract Registry[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUserRegistries',
    outputs: [
      {
        name: '_registries',
        internalType: 'contract Registry[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalRegistries',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'userRegistries',
    outputs: [{ name: '', internalType: 'contract Registry', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegistryRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registryRouterABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'FactoryAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAddress',
    outputs: [{ name: '_address', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_factory', internalType: 'address', type: 'address' }],
    name: 'setAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Safe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AddedOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'approvedHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ApproveHash',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'handler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangedFallbackHandler',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'guard',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangedGuard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'threshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ChangedThreshold',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DisabledModule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'EnabledModule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'payment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExecutionFailure',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ExecutionFromModuleFailure',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ExecutionFromModuleSuccess',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'payment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExecutionSuccess',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemovedOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SafeReceived',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'initiator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owners',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'threshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'initializer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fallbackHandler',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SafeSetup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'msgHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SignMsg',
  },
  { stateMutability: 'nonpayable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VERSION',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addOwnerWithThreshold',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashToApprove', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'approveHash',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'approvedHashes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_threshold', internalType: 'uint256', type: 'uint256' }],
    name: 'changeThreshold',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'dataHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
      { name: 'requiredSignatures', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkNSignatures',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'dataHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkSignatures',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevModule', internalType: 'address', type: 'address' },
      { name: 'module', internalType: 'address', type: 'address' },
    ],
    name: 'disableModule',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'domainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'module', internalType: 'address', type: 'address' }],
    name: 'enableModule',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      { name: 'refundReceiver', internalType: 'address', type: 'address' },
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'encodeTransactionData',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      {
        name: 'refundReceiver',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'execTransaction',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
    ],
    name: 'execTransactionFromModule',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
    ],
    name: 'execTransactionFromModuleReturnData',
    outputs: [
      { name: 'success', internalType: 'bool', type: 'bool' },
      { name: 'returnData', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'start', internalType: 'address', type: 'address' },
      { name: 'pageSize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getModulesPaginated',
    outputs: [
      { name: 'array', internalType: 'address[]', type: 'address[]' },
      { name: 'next', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getStorageAt',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      { name: 'refundReceiver', internalType: 'address', type: 'address' },
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTransactionHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'module', internalType: 'address', type: 'address' }],
    name: 'isModuleEnabled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevOwner', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'handler', internalType: 'address', type: 'address' }],
    name: 'setFallbackHandler',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'guard', internalType: 'address', type: 'address' }],
    name: 'setGuard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'fallbackHandler', internalType: 'address', type: 'address' },
      { name: 'paymentToken', internalType: 'address', type: 'address' },
      { name: 'payment', internalType: 'uint256', type: 'uint256' },
      {
        name: 'paymentReceiver',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'setup',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'signedMessages',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targetContract', internalType: 'address', type: 'address' },
      { name: 'calldataPayload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'simulateAndRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevOwner', internalType: 'address', type: 'address' },
      { name: 'oldOwner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'swapOwner',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProxyABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'masterCopy',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeProxyABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_singleton', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'payable', type: 'fallback' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeProxyFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeProxyFactoryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proxy',
        internalType: 'contract SafeProxy',
        type: 'address',
        indexed: true,
      },
      {
        name: 'singleton',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ProxyCreation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_singleton', internalType: 'address', type: 'address' },
      { name: 'initializer', internalType: 'bytes', type: 'bytes' },
      { name: 'saltNonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createChainSpecificProxyWithNonce',
    outputs: [
      { name: 'proxy', internalType: 'contract SafeProxy', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_singleton', internalType: 'address', type: 'address' },
      { name: 'initializer', internalType: 'bytes', type: 'bytes' },
      { name: 'saltNonce', internalType: 'uint256', type: 'uint256' },
      {
        name: 'callback',
        internalType: 'contract IProxyCreationCallback',
        type: 'address',
      },
    ],
    name: 'createProxyWithCallback',
    outputs: [
      { name: 'proxy', internalType: 'contract SafeProxy', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_singleton', internalType: 'address', type: 'address' },
      { name: 'initializer', internalType: 'bytes', type: 'bytes' },
      { name: 'saltNonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createProxyWithNonce',
    outputs: [
      { name: 'proxy', internalType: 'contract SafeProxy', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'proxyCreationCode',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdInvariantABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StorageAccessible
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const storageAccessibleABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getStorageAt',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targetContract', internalType: 'address', type: 'address' },
      { name: 'calldataPayload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'simulateAndRevert',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Test
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function useFallbackManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fallbackManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof fallbackManagerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof fallbackManagerABI, TFunctionName, TMode>({
    abi: fallbackManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function useFallbackManagerSetFallbackHandler<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fallbackManagerABI,
          'setFallbackHandler'
        >['request']['abi'],
        'setFallbackHandler',
        TMode
      > & { functionName?: 'setFallbackHandler' }
    : UseContractWriteConfig<
        typeof fallbackManagerABI,
        'setFallbackHandler',
        TMode
      > & {
        abi?: never
        functionName?: 'setFallbackHandler'
      } = {} as any,
) {
  return useContractWrite<
    typeof fallbackManagerABI,
    'setFallbackHandler',
    TMode
  >({
    abi: fallbackManagerABI,
    functionName: 'setFallbackHandler',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function usePrepareFallbackManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fallbackManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: fallbackManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof fallbackManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function usePrepareFallbackManagerSetFallbackHandler(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fallbackManagerABI,
      'setFallbackHandler'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: fallbackManagerABI,
    functionName: 'setFallbackHandler',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fallbackManagerABI,
    'setFallbackHandler'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function useFallbackManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof fallbackManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: fallbackManagerABI,
    ...config,
  } as UseContractEventConfig<typeof fallbackManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fallbackManagerABI}__ and `eventName` set to `"ChangedFallbackHandler"`.
 */
export function useFallbackManagerChangedFallbackHandlerEvent(
  config: Omit<
    UseContractEventConfig<typeof fallbackManagerABI, 'ChangedFallbackHandler'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: fallbackManagerABI,
    eventName: 'ChangedFallbackHandler',
    ...config,
  } as UseContractEventConfig<
    typeof fallbackManagerABI,
    'ChangedFallbackHandler'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function useBaseGuardRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof baseGuardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: baseGuardABI,
    ...config,
  } as UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useBaseGuardSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof baseGuardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: baseGuardABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function useBaseGuardWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseGuardABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof baseGuardABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof baseGuardABI, TFunctionName, TMode>({
    abi: baseGuardABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function useBaseGuardCheckAfterExecution<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseGuardABI,
          'checkAfterExecution'
        >['request']['abi'],
        'checkAfterExecution',
        TMode
      > & { functionName?: 'checkAfterExecution' }
    : UseContractWriteConfig<
        typeof baseGuardABI,
        'checkAfterExecution',
        TMode
      > & {
        abi?: never
        functionName?: 'checkAfterExecution'
      } = {} as any,
) {
  return useContractWrite<typeof baseGuardABI, 'checkAfterExecution', TMode>({
    abi: baseGuardABI,
    functionName: 'checkAfterExecution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function useBaseGuardCheckTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseGuardABI,
          'checkTransaction'
        >['request']['abi'],
        'checkTransaction',
        TMode
      > & { functionName?: 'checkTransaction' }
    : UseContractWriteConfig<typeof baseGuardABI, 'checkTransaction', TMode> & {
        abi?: never
        functionName?: 'checkTransaction'
      } = {} as any,
) {
  return useContractWrite<typeof baseGuardABI, 'checkTransaction', TMode>({
    abi: baseGuardABI,
    functionName: 'checkTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function usePrepareBaseGuardWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseGuardABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseGuardABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseGuardABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function usePrepareBaseGuardCheckAfterExecution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseGuardABI, 'checkAfterExecution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseGuardABI,
    functionName: 'checkAfterExecution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof baseGuardABI,
    'checkAfterExecution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function usePrepareBaseGuardCheckTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseGuardABI, 'checkTransaction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseGuardABI,
    functionName: 'checkTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseGuardABI, 'checkTransaction'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link guardABI}__.
 */
export function useGuardRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof guardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof guardABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: guardABI, ...config } as UseContractReadConfig<
    typeof guardABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGuardSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof guardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof guardABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: guardABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof guardABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardABI}__.
 */
export function useGuardWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof guardABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof guardABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof guardABI, TFunctionName, TMode>({
    abi: guardABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function useGuardCheckAfterExecution<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardABI,
          'checkAfterExecution'
        >['request']['abi'],
        'checkAfterExecution',
        TMode
      > & { functionName?: 'checkAfterExecution' }
    : UseContractWriteConfig<typeof guardABI, 'checkAfterExecution', TMode> & {
        abi?: never
        functionName?: 'checkAfterExecution'
      } = {} as any,
) {
  return useContractWrite<typeof guardABI, 'checkAfterExecution', TMode>({
    abi: guardABI,
    functionName: 'checkAfterExecution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function useGuardCheckTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardABI,
          'checkTransaction'
        >['request']['abi'],
        'checkTransaction',
        TMode
      > & { functionName?: 'checkTransaction' }
    : UseContractWriteConfig<typeof guardABI, 'checkTransaction', TMode> & {
        abi?: never
        functionName?: 'checkTransaction'
      } = {} as any,
) {
  return useContractWrite<typeof guardABI, 'checkTransaction', TMode>({
    abi: guardABI,
    functionName: 'checkTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardABI}__.
 */
export function usePrepareGuardWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function usePrepareGuardCheckAfterExecution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardABI, 'checkAfterExecution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardABI,
    functionName: 'checkAfterExecution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardABI, 'checkAfterExecution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function usePrepareGuardCheckTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardABI, 'checkTransaction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardABI,
    functionName: 'checkTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardABI, 'checkTransaction'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function useGuardManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof guardManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof guardManagerABI, TFunctionName, TMode>({
    abi: guardManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardManagerABI}__ and `functionName` set to `"setGuard"`.
 */
export function useGuardManagerSetGuard<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardManagerABI,
          'setGuard'
        >['request']['abi'],
        'setGuard',
        TMode
      > & { functionName?: 'setGuard' }
    : UseContractWriteConfig<typeof guardManagerABI, 'setGuard', TMode> & {
        abi?: never
        functionName?: 'setGuard'
      } = {} as any,
) {
  return useContractWrite<typeof guardManagerABI, 'setGuard', TMode>({
    abi: guardManagerABI,
    functionName: 'setGuard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function usePrepareGuardManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardManagerABI}__ and `functionName` set to `"setGuard"`.
 */
export function usePrepareGuardManagerSetGuard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardManagerABI, 'setGuard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardManagerABI,
    functionName: 'setGuard',
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardManagerABI, 'setGuard'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function useGuardManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof guardManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: guardManagerABI,
    ...config,
  } as UseContractEventConfig<typeof guardManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link guardManagerABI}__ and `eventName` set to `"ChangedGuard"`.
 */
export function useGuardManagerChangedGuardEvent(
  config: Omit<
    UseContractEventConfig<typeof guardManagerABI, 'ChangedGuard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: guardManagerABI,
    eventName: 'ChangedGuard',
    ...config,
  } as UseContractEventConfig<typeof guardManagerABI, 'ChangedGuard'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<
  TFunctionName extends 'getBasefee',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBasefee',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TFunctionName extends 'getBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TFunctionName extends 'getBlockNumber',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockNumber',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TFunctionName extends 'getCurrentBlockCoinbase',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TFunctionName extends 'getCurrentBlockDifficulty',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TFunctionName extends 'getCurrentBlockGasLimit',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TFunctionName extends 'getCurrentBlockTimestamp',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TFunctionName extends 'getEthBalance',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getEthBalance',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TFunctionName extends 'getLastBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getLastBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iMulticall3ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, TFunctionName, TMode>({
    abi: iMulticall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate'
        >['request']['abi'],
        'aggregate',
        TMode
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate', TMode> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3'
        >['request']['abi'],
        'aggregate3',
        TMode
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate3', TMode> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3Value'
        >['request']['abi'],
        'aggregate3Value',
        TMode
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'aggregate3Value',
        TMode
      > & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3Value', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'blockAndAggregate'
        >['request']['abi'],
        'blockAndAggregate',
        TMode
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'blockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'blockAndAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryAggregate'
        >['request']['abi'],
        'tryAggregate',
        TMode
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate', TMode> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryBlockAndAggregate'
        >['request']['abi'],
        'tryBlockAndAggregate',
        TMode
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'tryBlockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryBlockAndAggregate', TMode>(
    {
      abi: iMulticall3ABI,
      functionName: 'tryBlockAndAggregate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'blockAndAggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      'tryBlockAndAggregate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'tryBlockAndAggregate'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__.
 */
export function useIProxyCreationCallbackWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iProxyCreationCallbackABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iProxyCreationCallbackABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof iProxyCreationCallbackABI,
    TFunctionName,
    TMode
  >({ abi: iProxyCreationCallbackABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__ and `functionName` set to `"proxyCreated"`.
 */
export function useIProxyCreationCallbackProxyCreated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iProxyCreationCallbackABI,
          'proxyCreated'
        >['request']['abi'],
        'proxyCreated',
        TMode
      > & { functionName?: 'proxyCreated' }
    : UseContractWriteConfig<
        typeof iProxyCreationCallbackABI,
        'proxyCreated',
        TMode
      > & {
        abi?: never
        functionName?: 'proxyCreated'
      } = {} as any,
) {
  return useContractWrite<
    typeof iProxyCreationCallbackABI,
    'proxyCreated',
    TMode
  >({
    abi: iProxyCreationCallbackABI,
    functionName: 'proxyCreated',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__.
 */
export function usePrepareIProxyCreationCallbackWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iProxyCreationCallbackABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iProxyCreationCallbackABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iProxyCreationCallbackABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__ and `functionName` set to `"proxyCreated"`.
 */
export function usePrepareIProxyCreationCallbackProxyCreated(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iProxyCreationCallbackABI,
      'proxyCreated'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iProxyCreationCallbackABI,
    functionName: 'proxyCreated',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iProxyCreationCallbackABI,
    'proxyCreated'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSignatureValidatorABI}__.
 */
export function useISignatureValidatorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iSignatureValidatorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSignatureValidatorABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSignatureValidatorABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSignatureValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSignatureValidatorABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useISignatureValidatorIsValidSignature<
  TFunctionName extends 'isValidSignature',
  TSelectData = ReadContractResult<
    typeof iSignatureValidatorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSignatureValidatorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSignatureValidatorABI,
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<
    typeof iSignatureValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function useModuleManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof moduleManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: moduleManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof moduleManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"getModulesPaginated"`.
 */
export function useModuleManagerGetModulesPaginated<
  TFunctionName extends 'getModulesPaginated',
  TSelectData = ReadContractResult<typeof moduleManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: moduleManagerABI,
    functionName: 'getModulesPaginated',
    ...config,
  } as UseContractReadConfig<
    typeof moduleManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"isModuleEnabled"`.
 */
export function useModuleManagerIsModuleEnabled<
  TFunctionName extends 'isModuleEnabled',
  TSelectData = ReadContractResult<typeof moduleManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: moduleManagerABI,
    functionName: 'isModuleEnabled',
    ...config,
  } as UseContractReadConfig<
    typeof moduleManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function useModuleManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof moduleManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof moduleManagerABI, TFunctionName, TMode>({
    abi: moduleManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"disableModule"`.
 */
export function useModuleManagerDisableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          'disableModule'
        >['request']['abi'],
        'disableModule',
        TMode
      > & { functionName?: 'disableModule' }
    : UseContractWriteConfig<
        typeof moduleManagerABI,
        'disableModule',
        TMode
      > & {
        abi?: never
        functionName?: 'disableModule'
      } = {} as any,
) {
  return useContractWrite<typeof moduleManagerABI, 'disableModule', TMode>({
    abi: moduleManagerABI,
    functionName: 'disableModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"enableModule"`.
 */
export function useModuleManagerEnableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          'enableModule'
        >['request']['abi'],
        'enableModule',
        TMode
      > & { functionName?: 'enableModule' }
    : UseContractWriteConfig<typeof moduleManagerABI, 'enableModule', TMode> & {
        abi?: never
        functionName?: 'enableModule'
      } = {} as any,
) {
  return useContractWrite<typeof moduleManagerABI, 'enableModule', TMode>({
    abi: moduleManagerABI,
    functionName: 'enableModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function useModuleManagerExecTransactionFromModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          'execTransactionFromModule'
        >['request']['abi'],
        'execTransactionFromModule',
        TMode
      > & { functionName?: 'execTransactionFromModule' }
    : UseContractWriteConfig<
        typeof moduleManagerABI,
        'execTransactionFromModule',
        TMode
      > & {
        abi?: never
        functionName?: 'execTransactionFromModule'
      } = {} as any,
) {
  return useContractWrite<
    typeof moduleManagerABI,
    'execTransactionFromModule',
    TMode
  >({
    abi: moduleManagerABI,
    functionName: 'execTransactionFromModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function useModuleManagerExecTransactionFromModuleReturnData<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          'execTransactionFromModuleReturnData'
        >['request']['abi'],
        'execTransactionFromModuleReturnData',
        TMode
      > & { functionName?: 'execTransactionFromModuleReturnData' }
    : UseContractWriteConfig<
        typeof moduleManagerABI,
        'execTransactionFromModuleReturnData',
        TMode
      > & {
        abi?: never
        functionName?: 'execTransactionFromModuleReturnData'
      } = {} as any,
) {
  return useContractWrite<
    typeof moduleManagerABI,
    'execTransactionFromModuleReturnData',
    TMode
  >({
    abi: moduleManagerABI,
    functionName: 'execTransactionFromModuleReturnData',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function usePrepareModuleManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"disableModule"`.
 */
export function usePrepareModuleManagerDisableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleManagerABI, 'disableModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: 'disableModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, 'disableModule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"enableModule"`.
 */
export function usePrepareModuleManagerEnableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleManagerABI, 'enableModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: 'enableModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, 'enableModule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function usePrepareModuleManagerExecTransactionFromModule(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof moduleManagerABI,
      'execTransactionFromModule'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: 'execTransactionFromModule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof moduleManagerABI,
    'execTransactionFromModule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function usePrepareModuleManagerExecTransactionFromModuleReturnData(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof moduleManagerABI,
      'execTransactionFromModuleReturnData'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: 'execTransactionFromModuleReturnData',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof moduleManagerABI,
    'execTransactionFromModuleReturnData'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function useModuleManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof moduleManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"DisabledModule"`.
 */
export function useModuleManagerDisabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof moduleManagerABI, 'DisabledModule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: 'DisabledModule',
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, 'DisabledModule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"EnabledModule"`.
 */
export function useModuleManagerEnabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof moduleManagerABI, 'EnabledModule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: 'EnabledModule',
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, 'EnabledModule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"ExecutionFromModuleFailure"`.
 */
export function useModuleManagerExecutionFromModuleFailureEvent(
  config: Omit<
    UseContractEventConfig<
      typeof moduleManagerABI,
      'ExecutionFromModuleFailure'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: 'ExecutionFromModuleFailure',
    ...config,
  } as UseContractEventConfig<
    typeof moduleManagerABI,
    'ExecutionFromModuleFailure'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"ExecutionFromModuleSuccess"`.
 */
export function useModuleManagerExecutionFromModuleSuccessEvent(
  config: Omit<
    UseContractEventConfig<
      typeof moduleManagerABI,
      'ExecutionFromModuleSuccess'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: 'ExecutionFromModuleSuccess',
    ...config,
  } as UseContractEventConfig<
    typeof moduleManagerABI,
    'ExecutionFromModuleSuccess'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeCurrencyPaymentFallbackABI}__.
 */
export function useNativeCurrencyPaymentFallbackEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<typeof nativeCurrencyPaymentFallbackABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: nativeCurrencyPaymentFallbackABI,
    ...config,
  } as UseContractEventConfig<
    typeof nativeCurrencyPaymentFallbackABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeCurrencyPaymentFallbackABI}__ and `eventName` set to `"SafeReceived"`.
 */
export function useNativeCurrencyPaymentFallbackSafeReceivedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof nativeCurrencyPaymentFallbackABI,
      'SafeReceived'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nativeCurrencyPaymentFallbackABI,
    eventName: 'SafeReceived',
    ...config,
  } as UseContractEventConfig<
    typeof nativeCurrencyPaymentFallbackABI,
    'SafeReceived'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof ownerManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"getOwners"`.
 */
export function useOwnerManagerGetOwners<
  TFunctionName extends 'getOwners',
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<
    typeof ownerManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"getThreshold"`.
 */
export function useOwnerManagerGetThreshold<
  TFunctionName extends 'getThreshold',
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    functionName: 'getThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof ownerManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"isOwner"`.
 */
export function useOwnerManagerIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof ownerManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownerManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, TFunctionName, TMode>({
    abi: ownerManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function useOwnerManagerAddOwnerWithThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          'addOwnerWithThreshold'
        >['request']['abi'],
        'addOwnerWithThreshold',
        TMode
      > & { functionName?: 'addOwnerWithThreshold' }
    : UseContractWriteConfig<
        typeof ownerManagerABI,
        'addOwnerWithThreshold',
        TMode
      > & {
        abi?: never
        functionName?: 'addOwnerWithThreshold'
      } = {} as any,
) {
  return useContractWrite<
    typeof ownerManagerABI,
    'addOwnerWithThreshold',
    TMode
  >({
    abi: ownerManagerABI,
    functionName: 'addOwnerWithThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function useOwnerManagerChangeThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          'changeThreshold'
        >['request']['abi'],
        'changeThreshold',
        TMode
      > & { functionName?: 'changeThreshold' }
    : UseContractWriteConfig<
        typeof ownerManagerABI,
        'changeThreshold',
        TMode
      > & {
        abi?: never
        functionName?: 'changeThreshold'
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, 'changeThreshold', TMode>({
    abi: ownerManagerABI,
    functionName: 'changeThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useOwnerManagerRemoveOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          'removeOwner'
        >['request']['abi'],
        'removeOwner',
        TMode
      > & { functionName?: 'removeOwner' }
    : UseContractWriteConfig<typeof ownerManagerABI, 'removeOwner', TMode> & {
        abi?: never
        functionName?: 'removeOwner'
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, 'removeOwner', TMode>({
    abi: ownerManagerABI,
    functionName: 'removeOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"swapOwner"`.
 */
export function useOwnerManagerSwapOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          'swapOwner'
        >['request']['abi'],
        'swapOwner',
        TMode
      > & { functionName?: 'swapOwner' }
    : UseContractWriteConfig<typeof ownerManagerABI, 'swapOwner', TMode> & {
        abi?: never
        functionName?: 'swapOwner'
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, 'swapOwner', TMode>({
    abi: ownerManagerABI,
    functionName: 'swapOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function usePrepareOwnerManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function usePrepareOwnerManagerAddOwnerWithThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownerManagerABI,
      'addOwnerWithThreshold'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: 'addOwnerWithThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownerManagerABI,
    'addOwnerWithThreshold'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function usePrepareOwnerManagerChangeThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, 'changeThreshold'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: 'changeThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, 'changeThreshold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareOwnerManagerRemoveOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, 'removeOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: 'removeOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, 'removeOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"swapOwner"`.
 */
export function usePrepareOwnerManagerSwapOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, 'swapOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: 'swapOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, 'swapOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__ and `eventName` set to `"AddedOwner"`.
 */
export function useOwnerManagerAddedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, 'AddedOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    eventName: 'AddedOwner',
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, 'AddedOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__ and `eventName` set to `"ChangedThreshold"`.
 */
export function useOwnerManagerChangedThresholdEvent(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, 'ChangedThreshold'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    eventName: 'ChangedThreshold',
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, 'ChangedThreshold'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__ and `eventName` set to `"RemovedOwner"`.
 */
export function useOwnerManagerRemovedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, 'RemovedOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    eventName: 'RemovedOwner',
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, 'RemovedOwner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__.
 */
export function useCounterTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof counterTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: counterTestABI,
    ...config,
  } as UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useCounterTestIsTest<
  TFunctionName extends 'IS_TEST',
  TSelectData = ReadContractResult<typeof counterTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterTestABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useCounterTestExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof counterTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterTestABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useCounterTestExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof counterTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterTestABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useCounterTestExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof counterTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterTestABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"registry"`.
 */
export function useCounterTestRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof counterTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterTestABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useCounterTestTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof counterTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterTestABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useCounterTestTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof counterTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterTestABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useCounterTestTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof counterTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterTestABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useCounterTestTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof counterTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterTestABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useCounterTestTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof counterTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterTestABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<typeof counterTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterTestABI}__.
 */
export function useCounterTestWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterTestABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof counterTestABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof counterTestABI, TFunctionName, TMode>({
    abi: counterTestABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"failed"`.
 */
export function useCounterTestFailed<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterTestABI,
          'failed'
        >['request']['abi'],
        'failed',
        TMode
      > & { functionName?: 'failed' }
    : UseContractWriteConfig<typeof counterTestABI, 'failed', TMode> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any,
) {
  return useContractWrite<typeof counterTestABI, 'failed', TMode>({
    abi: counterTestABI,
    functionName: 'failed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"setUp"`.
 */
export function useCounterTestSetUp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterTestABI,
          'setUp'
        >['request']['abi'],
        'setUp',
        TMode
      > & { functionName?: 'setUp' }
    : UseContractWriteConfig<typeof counterTestABI, 'setUp', TMode> & {
        abi?: never
        functionName?: 'setUp'
      } = {} as any,
) {
  return useContractWrite<typeof counterTestABI, 'setUp', TMode>({
    abi: counterTestABI,
    functionName: 'setUp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"testRegistryOwnerIsRootRole"`.
 */
export function useCounterTestTestRegistryOwnerIsRootRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterTestABI,
          'testRegistryOwnerIsRootRole'
        >['request']['abi'],
        'testRegistryOwnerIsRootRole',
        TMode
      > & { functionName?: 'testRegistryOwnerIsRootRole' }
    : UseContractWriteConfig<
        typeof counterTestABI,
        'testRegistryOwnerIsRootRole',
        TMode
      > & {
        abi?: never
        functionName?: 'testRegistryOwnerIsRootRole'
      } = {} as any,
) {
  return useContractWrite<
    typeof counterTestABI,
    'testRegistryOwnerIsRootRole',
    TMode
  >({
    abi: counterTestABI,
    functionName: 'testRegistryOwnerIsRootRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"testRootRoleOwnerIsSender"`.
 */
export function useCounterTestTestRootRoleOwnerIsSender<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterTestABI,
          'testRootRoleOwnerIsSender'
        >['request']['abi'],
        'testRootRoleOwnerIsSender',
        TMode
      > & { functionName?: 'testRootRoleOwnerIsSender' }
    : UseContractWriteConfig<
        typeof counterTestABI,
        'testRootRoleOwnerIsSender',
        TMode
      > & {
        abi?: never
        functionName?: 'testRootRoleOwnerIsSender'
      } = {} as any,
) {
  return useContractWrite<
    typeof counterTestABI,
    'testRootRoleOwnerIsSender',
    TMode
  >({
    abi: counterTestABI,
    functionName: 'testRootRoleOwnerIsSender',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterTestABI}__.
 */
export function usePrepareCounterTestWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterTestABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterTestABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterTestABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareCounterTestFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterTestABI, 'failed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterTestABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterTestABI, 'failed'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareCounterTestSetUp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterTestABI, 'setUp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterTestABI,
    functionName: 'setUp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterTestABI, 'setUp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"testRegistryOwnerIsRootRole"`.
 */
export function usePrepareCounterTestTestRegistryOwnerIsRootRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof counterTestABI,
      'testRegistryOwnerIsRootRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterTestABI,
    functionName: 'testRegistryOwnerIsRootRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof counterTestABI,
    'testRegistryOwnerIsRootRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterTestABI}__ and `functionName` set to `"testRootRoleOwnerIsSender"`.
 */
export function usePrepareCounterTestTestRootRoleOwnerIsSender(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof counterTestABI,
      'testRootRoleOwnerIsSender'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterTestABI,
    functionName: 'testRootRoleOwnerIsSender',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof counterTestABI,
    'testRootRoleOwnerIsSender'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__.
 */
export function useCounterTestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log"`.
 */
export function useCounterTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useCounterTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_array"`.
 */
export function useCounterTestLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useCounterTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useCounterTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useCounterTestLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useCounterTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useCounterTestLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useCounterTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useCounterTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useCounterTestLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useCounterTestLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useCounterTestLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useCounterTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useCounterTestLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useCounterTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useCounterTestLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterTestABI}__ and `eventName` set to `"logs"`.
 */
export function useCounterTestLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof counterTestABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterTestABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof counterTestABI, 'logs'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registryABI,
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getRole"`.
 */
export function useRegistryGetRole<
  TFunctionName extends 'getRole',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getRole',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getRoles"`.
 */
export function useRegistryGetRoles<
  TFunctionName extends 'getRoles',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getRoles',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"name"`.
 */
export function useRegistryName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"owner"`.
 */
export function useRegistryOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"roleInfo"`.
 */
export function useRegistryRoleInfo<
  TFunctionName extends 'roleInfo',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'roleInfo',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"roleSafes"`.
 */
export function useRegistryRoleSafes<
  TFunctionName extends 'roleSafes',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'roleSafes',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof registryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof registryABI, TFunctionName, TMode>({
    abi: registryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"addRole"`.
 */
export function useRegistryAddRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryABI,
          'addRole'
        >['request']['abi'],
        'addRole',
        TMode
      > & { functionName?: 'addRole' }
    : UseContractWriteConfig<typeof registryABI, 'addRole', TMode> & {
        abi?: never
        functionName?: 'addRole'
      } = {} as any,
) {
  return useContractWrite<typeof registryABI, 'addRole', TMode>({
    abi: registryABI,
    functionName: 'addRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useRegistryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof registryABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof registryABI, 'renounceOwnership', TMode>({
    abi: registryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRegistryTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof registryABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof registryABI, 'transferOwnership', TMode>({
    abi: registryABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__.
 */
export function usePrepareRegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"addRole"`.
 */
export function usePrepareRegistryAddRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'addRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'addRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'addRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareRegistryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRegistryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registryABI,
    ...config,
  } as UseContractEventConfig<typeof registryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useRegistryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof registryABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"RegistryCreated"`.
 */
export function useRegistryRegistryCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, 'RegistryCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registryABI,
    eventName: 'RegistryCreated',
    ...config,
  } as UseContractEventConfig<typeof registryABI, 'RegistryCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"RoleAdded"`.
 */
export function useRegistryRoleAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, 'RoleAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registryABI,
    eventName: 'RoleAdded',
    ...config,
  } as UseContractEventConfig<typeof registryABI, 'RoleAdded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryFactoryABI}__.
 */
export function useRegistryFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registryFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registryFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof registryFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryFactoryABI}__ and `functionName` set to `"getUserRegistries"`.
 */
export function useRegistryFactoryGetUserRegistries<
  TFunctionName extends 'getUserRegistries',
  TSelectData = ReadContractResult<typeof registryFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryFactoryABI,
    functionName: 'getUserRegistries',
    ...config,
  } as UseContractReadConfig<
    typeof registryFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryFactoryABI}__ and `functionName` set to `"totalRegistries"`.
 */
export function useRegistryFactoryTotalRegistries<
  TFunctionName extends 'totalRegistries',
  TSelectData = ReadContractResult<typeof registryFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryFactoryABI,
    functionName: 'totalRegistries',
    ...config,
  } as UseContractReadConfig<
    typeof registryFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryFactoryABI}__ and `functionName` set to `"userRegistries"`.
 */
export function useRegistryFactoryUserRegistries<
  TFunctionName extends 'userRegistries',
  TSelectData = ReadContractResult<typeof registryFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryFactoryABI,
    functionName: 'userRegistries',
    ...config,
  } as UseContractReadConfig<
    typeof registryFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryFactoryABI}__.
 */
export function useRegistryFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof registryFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof registryFactoryABI, TFunctionName, TMode>({
    abi: registryFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryFactoryABI}__ and `functionName` set to `"deployRegistry"`.
 */
export function useRegistryFactoryDeployRegistry<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryFactoryABI,
          'deployRegistry'
        >['request']['abi'],
        'deployRegistry',
        TMode
      > & { functionName?: 'deployRegistry' }
    : UseContractWriteConfig<
        typeof registryFactoryABI,
        'deployRegistry',
        TMode
      > & {
        abi?: never
        functionName?: 'deployRegistry'
      } = {} as any,
) {
  return useContractWrite<typeof registryFactoryABI, 'deployRegistry', TMode>({
    abi: registryFactoryABI,
    functionName: 'deployRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryFactoryABI}__.
 */
export function usePrepareRegistryFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryFactoryABI}__ and `functionName` set to `"deployRegistry"`.
 */
export function usePrepareRegistryFactoryDeployRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryFactoryABI, 'deployRegistry'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryFactoryABI,
    functionName: 'deployRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registryFactoryABI,
    'deployRegistry'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryFactoryABI}__.
 */
export function useRegistryFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registryFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registryFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof registryFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryFactoryABI}__ and `eventName` set to `"RegistryCreated"`.
 */
export function useRegistryFactoryRegistryCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryFactoryABI, 'RegistryCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registryFactoryABI,
    eventName: 'RegistryCreated',
    ...config,
  } as UseContractEventConfig<typeof registryFactoryABI, 'RegistryCreated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryRouterABI}__.
 */
export function useRegistryRouterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registryRouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof registryRouterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: registryRouterABI,
    ...config,
  } as UseContractReadConfig<
    typeof registryRouterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryRouterABI}__ and `functionName` set to `"FactoryAddress"`.
 */
export function useRegistryRouterFactoryAddress<
  TFunctionName extends 'FactoryAddress',
  TSelectData = ReadContractResult<typeof registryRouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof registryRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryRouterABI,
    functionName: 'FactoryAddress',
    ...config,
  } as UseContractReadConfig<
    typeof registryRouterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryRouterABI}__ and `functionName` set to `"getAddress"`.
 */
export function useRegistryRouterGetAddress<
  TFunctionName extends 'getAddress',
  TSelectData = ReadContractResult<typeof registryRouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof registryRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryRouterABI,
    functionName: 'getAddress',
    ...config,
  } as UseContractReadConfig<
    typeof registryRouterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryRouterABI}__ and `functionName` set to `"owner"`.
 */
export function useRegistryRouterOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof registryRouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof registryRouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: registryRouterABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof registryRouterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryRouterABI}__.
 */
export function useRegistryRouterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryRouterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof registryRouterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof registryRouterABI, TFunctionName, TMode>({
    abi: registryRouterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryRouterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useRegistryRouterRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryRouterABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof registryRouterABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof registryRouterABI, 'renounceOwnership', TMode>(
    {
      abi: registryRouterABI,
      functionName: 'renounceOwnership',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryRouterABI}__ and `functionName` set to `"setAddress"`.
 */
export function useRegistryRouterSetAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryRouterABI,
          'setAddress'
        >['request']['abi'],
        'setAddress',
        TMode
      > & { functionName?: 'setAddress' }
    : UseContractWriteConfig<typeof registryRouterABI, 'setAddress', TMode> & {
        abi?: never
        functionName?: 'setAddress'
      } = {} as any,
) {
  return useContractWrite<typeof registryRouterABI, 'setAddress', TMode>({
    abi: registryRouterABI,
    functionName: 'setAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryRouterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRegistryRouterTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryRouterABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof registryRouterABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof registryRouterABI, 'transferOwnership', TMode>(
    {
      abi: registryRouterABI,
      functionName: 'transferOwnership',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryRouterABI}__.
 */
export function usePrepareRegistryRouterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryRouterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryRouterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryRouterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryRouterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareRegistryRouterRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registryRouterABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryRouterABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registryRouterABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryRouterABI}__ and `functionName` set to `"setAddress"`.
 */
export function usePrepareRegistryRouterSetAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryRouterABI, 'setAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryRouterABI,
    functionName: 'setAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryRouterABI, 'setAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryRouterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRegistryRouterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registryRouterABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryRouterABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registryRouterABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryRouterABI}__.
 */
export function useRegistryRouterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registryRouterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: registryRouterABI,
    ...config,
  } as UseContractEventConfig<typeof registryRouterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryRouterABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useRegistryRouterOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof registryRouterABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: registryRouterABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof registryRouterABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__.
 */
export function useSafeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: safeABI, ...config } as UseContractReadConfig<
    typeof safeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"VERSION"`.
 */
export function useSafeVersion<
  TFunctionName extends 'VERSION',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'VERSION',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"approvedHashes"`.
 */
export function useSafeApprovedHashes<
  TFunctionName extends 'approvedHashes',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'approvedHashes',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"checkNSignatures"`.
 */
export function useSafeCheckNSignatures<
  TFunctionName extends 'checkNSignatures',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'checkNSignatures',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"checkSignatures"`.
 */
export function useSafeCheckSignatures<
  TFunctionName extends 'checkSignatures',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'checkSignatures',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"domainSeparator"`.
 */
export function useSafeDomainSeparator<
  TFunctionName extends 'domainSeparator',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'domainSeparator',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"encodeTransactionData"`.
 */
export function useSafeEncodeTransactionData<
  TFunctionName extends 'encodeTransactionData',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'encodeTransactionData',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getChainId"`.
 */
export function useSafeGetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getModulesPaginated"`.
 */
export function useSafeGetModulesPaginated<
  TFunctionName extends 'getModulesPaginated',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getModulesPaginated',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getOwners"`.
 */
export function useSafeGetOwners<
  TFunctionName extends 'getOwners',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getStorageAt"`.
 */
export function useSafeGetStorageAt<
  TFunctionName extends 'getStorageAt',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getStorageAt',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getThreshold"`.
 */
export function useSafeGetThreshold<
  TFunctionName extends 'getThreshold',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getThreshold',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getTransactionHash"`.
 */
export function useSafeGetTransactionHash<
  TFunctionName extends 'getTransactionHash',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getTransactionHash',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"isModuleEnabled"`.
 */
export function useSafeIsModuleEnabled<
  TFunctionName extends 'isModuleEnabled',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'isModuleEnabled',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"isOwner"`.
 */
export function useSafeIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"nonce"`.
 */
export function useSafeNonce<
  TFunctionName extends 'nonce',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'nonce',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"signedMessages"`.
 */
export function useSafeSignedMessages<
  TFunctionName extends 'signedMessages',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'signedMessages',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__.
 */
export function useSafeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof safeABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof safeABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, TFunctionName, TMode>({
    abi: safeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function useSafeAddOwnerWithThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'addOwnerWithThreshold'
        >['request']['abi'],
        'addOwnerWithThreshold',
        TMode
      > & { functionName?: 'addOwnerWithThreshold' }
    : UseContractWriteConfig<typeof safeABI, 'addOwnerWithThreshold', TMode> & {
        abi?: never
        functionName?: 'addOwnerWithThreshold'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'addOwnerWithThreshold', TMode>({
    abi: safeABI,
    functionName: 'addOwnerWithThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"approveHash"`.
 */
export function useSafeApproveHash<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'approveHash'
        >['request']['abi'],
        'approveHash',
        TMode
      > & { functionName?: 'approveHash' }
    : UseContractWriteConfig<typeof safeABI, 'approveHash', TMode> & {
        abi?: never
        functionName?: 'approveHash'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'approveHash', TMode>({
    abi: safeABI,
    functionName: 'approveHash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function useSafeChangeThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'changeThreshold'
        >['request']['abi'],
        'changeThreshold',
        TMode
      > & { functionName?: 'changeThreshold' }
    : UseContractWriteConfig<typeof safeABI, 'changeThreshold', TMode> & {
        abi?: never
        functionName?: 'changeThreshold'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'changeThreshold', TMode>({
    abi: safeABI,
    functionName: 'changeThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"disableModule"`.
 */
export function useSafeDisableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'disableModule'
        >['request']['abi'],
        'disableModule',
        TMode
      > & { functionName?: 'disableModule' }
    : UseContractWriteConfig<typeof safeABI, 'disableModule', TMode> & {
        abi?: never
        functionName?: 'disableModule'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'disableModule', TMode>({
    abi: safeABI,
    functionName: 'disableModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"enableModule"`.
 */
export function useSafeEnableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'enableModule'
        >['request']['abi'],
        'enableModule',
        TMode
      > & { functionName?: 'enableModule' }
    : UseContractWriteConfig<typeof safeABI, 'enableModule', TMode> & {
        abi?: never
        functionName?: 'enableModule'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'enableModule', TMode>({
    abi: safeABI,
    functionName: 'enableModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransaction"`.
 */
export function useSafeExecTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'execTransaction'
        >['request']['abi'],
        'execTransaction',
        TMode
      > & { functionName?: 'execTransaction' }
    : UseContractWriteConfig<typeof safeABI, 'execTransaction', TMode> & {
        abi?: never
        functionName?: 'execTransaction'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'execTransaction', TMode>({
    abi: safeABI,
    functionName: 'execTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function useSafeExecTransactionFromModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'execTransactionFromModule'
        >['request']['abi'],
        'execTransactionFromModule',
        TMode
      > & { functionName?: 'execTransactionFromModule' }
    : UseContractWriteConfig<
        typeof safeABI,
        'execTransactionFromModule',
        TMode
      > & {
        abi?: never
        functionName?: 'execTransactionFromModule'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'execTransactionFromModule', TMode>({
    abi: safeABI,
    functionName: 'execTransactionFromModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function useSafeExecTransactionFromModuleReturnData<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'execTransactionFromModuleReturnData'
        >['request']['abi'],
        'execTransactionFromModuleReturnData',
        TMode
      > & { functionName?: 'execTransactionFromModuleReturnData' }
    : UseContractWriteConfig<
        typeof safeABI,
        'execTransactionFromModuleReturnData',
        TMode
      > & {
        abi?: never
        functionName?: 'execTransactionFromModuleReturnData'
      } = {} as any,
) {
  return useContractWrite<
    typeof safeABI,
    'execTransactionFromModuleReturnData',
    TMode
  >({
    abi: safeABI,
    functionName: 'execTransactionFromModuleReturnData',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useSafeRemoveOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'removeOwner'
        >['request']['abi'],
        'removeOwner',
        TMode
      > & { functionName?: 'removeOwner' }
    : UseContractWriteConfig<typeof safeABI, 'removeOwner', TMode> & {
        abi?: never
        functionName?: 'removeOwner'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'removeOwner', TMode>({
    abi: safeABI,
    functionName: 'removeOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function useSafeSetFallbackHandler<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'setFallbackHandler'
        >['request']['abi'],
        'setFallbackHandler',
        TMode
      > & { functionName?: 'setFallbackHandler' }
    : UseContractWriteConfig<typeof safeABI, 'setFallbackHandler', TMode> & {
        abi?: never
        functionName?: 'setFallbackHandler'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'setFallbackHandler', TMode>({
    abi: safeABI,
    functionName: 'setFallbackHandler',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setGuard"`.
 */
export function useSafeSetGuard<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'setGuard'
        >['request']['abi'],
        'setGuard',
        TMode
      > & { functionName?: 'setGuard' }
    : UseContractWriteConfig<typeof safeABI, 'setGuard', TMode> & {
        abi?: never
        functionName?: 'setGuard'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'setGuard', TMode>({
    abi: safeABI,
    functionName: 'setGuard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setup"`.
 */
export function useSafeSetup<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof safeABI, 'setup'>['request']['abi'],
        'setup',
        TMode
      > & { functionName?: 'setup' }
    : UseContractWriteConfig<typeof safeABI, 'setup', TMode> & {
        abi?: never
        functionName?: 'setup'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'setup', TMode>({
    abi: safeABI,
    functionName: 'setup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function useSafeSimulateAndRevert<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'simulateAndRevert'
        >['request']['abi'],
        'simulateAndRevert',
        TMode
      > & { functionName?: 'simulateAndRevert' }
    : UseContractWriteConfig<typeof safeABI, 'simulateAndRevert', TMode> & {
        abi?: never
        functionName?: 'simulateAndRevert'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'simulateAndRevert', TMode>({
    abi: safeABI,
    functionName: 'simulateAndRevert',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"swapOwner"`.
 */
export function useSafeSwapOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'swapOwner'
        >['request']['abi'],
        'swapOwner',
        TMode
      > & { functionName?: 'swapOwner' }
    : UseContractWriteConfig<typeof safeABI, 'swapOwner', TMode> & {
        abi?: never
        functionName?: 'swapOwner'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'swapOwner', TMode>({
    abi: safeABI,
    functionName: 'swapOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__.
 */
export function usePrepareSafeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function usePrepareSafeAddOwnerWithThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'addOwnerWithThreshold'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'addOwnerWithThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'addOwnerWithThreshold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"approveHash"`.
 */
export function usePrepareSafeApproveHash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'approveHash'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'approveHash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'approveHash'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function usePrepareSafeChangeThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'changeThreshold'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'changeThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'changeThreshold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"disableModule"`.
 */
export function usePrepareSafeDisableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'disableModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'disableModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'disableModule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"enableModule"`.
 */
export function usePrepareSafeEnableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'enableModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'enableModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'enableModule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransaction"`.
 */
export function usePrepareSafeExecTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'execTransaction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'execTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'execTransaction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function usePrepareSafeExecTransactionFromModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'execTransactionFromModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'execTransactionFromModule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof safeABI,
    'execTransactionFromModule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function usePrepareSafeExecTransactionFromModuleReturnData(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeABI,
      'execTransactionFromModuleReturnData'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'execTransactionFromModuleReturnData',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof safeABI,
    'execTransactionFromModuleReturnData'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareSafeRemoveOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'removeOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'removeOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'removeOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function usePrepareSafeSetFallbackHandler(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'setFallbackHandler'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'setFallbackHandler',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'setFallbackHandler'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setGuard"`.
 */
export function usePrepareSafeSetGuard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'setGuard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'setGuard',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'setGuard'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setup"`.
 */
export function usePrepareSafeSetup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'setup'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'setup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'setup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function usePrepareSafeSimulateAndRevert(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'simulateAndRevert'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'simulateAndRevert',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'simulateAndRevert'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"swapOwner"`.
 */
export function usePrepareSafeSwapOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'swapOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'swapOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'swapOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__.
 */
export function useSafeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof safeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: safeABI, ...config } as UseContractEventConfig<
    typeof safeABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"AddedOwner"`.
 */
export function useSafeAddedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'AddedOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'AddedOwner',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'AddedOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ApproveHash"`.
 */
export function useSafeApproveHashEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ApproveHash'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ApproveHash',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ApproveHash'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ChangedFallbackHandler"`.
 */
export function useSafeChangedFallbackHandlerEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ChangedFallbackHandler'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ChangedFallbackHandler',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ChangedFallbackHandler'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ChangedGuard"`.
 */
export function useSafeChangedGuardEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ChangedGuard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ChangedGuard',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ChangedGuard'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ChangedThreshold"`.
 */
export function useSafeChangedThresholdEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ChangedThreshold'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ChangedThreshold',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ChangedThreshold'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"DisabledModule"`.
 */
export function useSafeDisabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'DisabledModule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'DisabledModule',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'DisabledModule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"EnabledModule"`.
 */
export function useSafeEnabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'EnabledModule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'EnabledModule',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'EnabledModule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionFailure"`.
 */
export function useSafeExecutionFailureEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ExecutionFailure'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ExecutionFailure',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ExecutionFailure'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionFromModuleFailure"`.
 */
export function useSafeExecutionFromModuleFailureEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ExecutionFromModuleFailure'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ExecutionFromModuleFailure',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ExecutionFromModuleFailure'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionFromModuleSuccess"`.
 */
export function useSafeExecutionFromModuleSuccessEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ExecutionFromModuleSuccess'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ExecutionFromModuleSuccess',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ExecutionFromModuleSuccess'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionSuccess"`.
 */
export function useSafeExecutionSuccessEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ExecutionSuccess'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ExecutionSuccess',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ExecutionSuccess'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"RemovedOwner"`.
 */
export function useSafeRemovedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'RemovedOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'RemovedOwner',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'RemovedOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"SafeReceived"`.
 */
export function useSafeSafeReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'SafeReceived'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'SafeReceived',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'SafeReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"SafeSetup"`.
 */
export function useSafeSafeSetupEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'SafeSetup'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'SafeSetup',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'SafeSetup'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"SignMsg"`.
 */
export function useSafeSignMsgEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'SignMsg'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'SignMsg',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'SignMsg'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProxyABI}__.
 */
export function useIProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iProxyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iProxyABI, ...config } as UseContractReadConfig<
    typeof iProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProxyABI}__ and `functionName` set to `"masterCopy"`.
 */
export function useIProxyMasterCopy<
  TFunctionName extends 'masterCopy',
  TSelectData = ReadContractResult<typeof iProxyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iProxyABI,
    functionName: 'masterCopy',
    ...config,
  } as UseContractReadConfig<typeof iProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function useSafeProxyFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof safeProxyFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProxyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: safeProxyFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof safeProxyFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"getChainId"`.
 */
export function useSafeProxyFactoryGetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof safeProxyFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProxyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeProxyFactoryABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<
    typeof safeProxyFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"proxyCreationCode"`.
 */
export function useSafeProxyFactoryProxyCreationCode<
  TFunctionName extends 'proxyCreationCode',
  TSelectData = ReadContractResult<typeof safeProxyFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProxyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeProxyFactoryABI,
    functionName: 'proxyCreationCode',
    ...config,
  } as UseContractReadConfig<
    typeof safeProxyFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function useSafeProxyFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof safeProxyFactoryABI, TFunctionName, TMode>({
    abi: safeProxyFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createChainSpecificProxyWithNonce"`.
 */
export function useSafeProxyFactoryCreateChainSpecificProxyWithNonce<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          'createChainSpecificProxyWithNonce'
        >['request']['abi'],
        'createChainSpecificProxyWithNonce',
        TMode
      > & { functionName?: 'createChainSpecificProxyWithNonce' }
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        'createChainSpecificProxyWithNonce',
        TMode
      > & {
        abi?: never
        functionName?: 'createChainSpecificProxyWithNonce'
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProxyFactoryABI,
    'createChainSpecificProxyWithNonce',
    TMode
  >({
    abi: safeProxyFactoryABI,
    functionName: 'createChainSpecificProxyWithNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithCallback"`.
 */
export function useSafeProxyFactoryCreateProxyWithCallback<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          'createProxyWithCallback'
        >['request']['abi'],
        'createProxyWithCallback',
        TMode
      > & { functionName?: 'createProxyWithCallback' }
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        'createProxyWithCallback',
        TMode
      > & {
        abi?: never
        functionName?: 'createProxyWithCallback'
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProxyFactoryABI,
    'createProxyWithCallback',
    TMode
  >({
    abi: safeProxyFactoryABI,
    functionName: 'createProxyWithCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithNonce"`.
 */
export function useSafeProxyFactoryCreateProxyWithNonce<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          'createProxyWithNonce'
        >['request']['abi'],
        'createProxyWithNonce',
        TMode
      > & { functionName?: 'createProxyWithNonce' }
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        'createProxyWithNonce',
        TMode
      > & {
        abi?: never
        functionName?: 'createProxyWithNonce'
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProxyFactoryABI,
    'createProxyWithNonce',
    TMode
  >({
    abi: safeProxyFactoryABI,
    functionName: 'createProxyWithNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function usePrepareSafeProxyFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeProxyFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProxyFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createChainSpecificProxyWithNonce"`.
 */
export function usePrepareSafeProxyFactoryCreateChainSpecificProxyWithNonce(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProxyFactoryABI,
      'createChainSpecificProxyWithNonce'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    functionName: 'createChainSpecificProxyWithNonce',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof safeProxyFactoryABI,
    'createChainSpecificProxyWithNonce'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithCallback"`.
 */
export function usePrepareSafeProxyFactoryCreateProxyWithCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProxyFactoryABI,
      'createProxyWithCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    functionName: 'createProxyWithCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof safeProxyFactoryABI,
    'createProxyWithCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithNonce"`.
 */
export function usePrepareSafeProxyFactoryCreateProxyWithNonce(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProxyFactoryABI,
      'createProxyWithNonce'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    functionName: 'createProxyWithNonce',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof safeProxyFactoryABI,
    'createProxyWithNonce'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function useSafeProxyFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof safeProxyFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProxyFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof safeProxyFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `eventName` set to `"ProxyCreation"`.
 */
export function useSafeProxyFactoryProxyCreationEvent(
  config: Omit<
    UseContractEventConfig<typeof safeProxyFactoryABI, 'ProxyCreation'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProxyFactoryABI,
    eventName: 'ProxyCreation',
    ...config,
  } as UseContractEventConfig<typeof safeProxyFactoryABI, 'ProxyCreation'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariantRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useStdInvariantExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useStdInvariantExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useStdInvariantExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useStdInvariantTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useStdInvariantTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useStdInvariantTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useStdInvariantTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useStdInvariantTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function useStorageAccessibleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof storageAccessibleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof storageAccessibleABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: storageAccessibleABI,
    ...config,
  } as UseContractReadConfig<
    typeof storageAccessibleABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageAccessibleABI}__ and `functionName` set to `"getStorageAt"`.
 */
export function useStorageAccessibleGetStorageAt<
  TFunctionName extends 'getStorageAt',
  TSelectData = ReadContractResult<typeof storageAccessibleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof storageAccessibleABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: storageAccessibleABI,
    functionName: 'getStorageAt',
    ...config,
  } as UseContractReadConfig<
    typeof storageAccessibleABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function useStorageAccessibleWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof storageAccessibleABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof storageAccessibleABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof storageAccessibleABI, TFunctionName, TMode>({
    abi: storageAccessibleABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function useStorageAccessibleSimulateAndRevert<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof storageAccessibleABI,
          'simulateAndRevert'
        >['request']['abi'],
        'simulateAndRevert',
        TMode
      > & { functionName?: 'simulateAndRevert' }
    : UseContractWriteConfig<
        typeof storageAccessibleABI,
        'simulateAndRevert',
        TMode
      > & {
        abi?: never
        functionName?: 'simulateAndRevert'
      } = {} as any,
) {
  return useContractWrite<
    typeof storageAccessibleABI,
    'simulateAndRevert',
    TMode
  >({
    abi: storageAccessibleABI,
    functionName: 'simulateAndRevert',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function usePrepareStorageAccessibleWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof storageAccessibleABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageAccessibleABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof storageAccessibleABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function usePrepareStorageAccessibleSimulateAndRevert(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof storageAccessibleABI,
      'simulateAndRevert'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageAccessibleABI,
    functionName: 'simulateAndRevert',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof storageAccessibleABI,
    'simulateAndRevert'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__.
 */
export function useTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: testABI, ...config } as UseContractReadConfig<
    typeof testABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useTestIsTest<
  TFunctionName extends 'IS_TEST',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useTestExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useTestExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useTestExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useTestTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useTestTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useTestTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useTestTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useTestTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testABI}__.
 */
export function useTestWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof testABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof testABI, TFunctionName, TMode>({
    abi: testABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"failed"`.
 */
export function useTestFailed<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof testABI, 'failed'>['request']['abi'],
        'failed',
        TMode
      > & { functionName?: 'failed' }
    : UseContractWriteConfig<typeof testABI, 'failed', TMode> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any,
) {
  return useContractWrite<typeof testABI, 'failed', TMode>({
    abi: testABI,
    functionName: 'failed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testABI}__.
 */
export function usePrepareTestWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof testABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareTestFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testABI, 'failed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testABI, 'failed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__.
 */
export function useTestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof testABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: testABI, ...config } as UseContractEventConfig<
    typeof testABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log"`.
 */
export function useTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_address"`.
 */
export function useTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_array"`.
 */
export function useTestLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_int"`.
 */
export function useTestLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useTestLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useTestLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useTestLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useTestLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useTestLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_string"`.
 */
export function useTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_uint"`.
 */
export function useTestLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"logs"`.
 */
export function useTestLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'logs'>)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function getFallbackManager(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: fallbackManagerABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function writeFallbackManager<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof fallbackManagerABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof fallbackManagerABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: fallbackManagerABI,
    ...config,
  } as unknown as WriteContractArgs<typeof fallbackManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function prepareWriteFallbackManager<
  TAbi extends readonly unknown[] = typeof fallbackManagerABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: fallbackManagerABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function watchFallbackManagerEvent<
  TAbi extends readonly unknown[] = typeof fallbackManagerABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: fallbackManagerABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function getBaseGuard(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: baseGuardABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function readBaseGuard<
  TAbi extends readonly unknown[] = typeof baseGuardABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: baseGuardABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function writeBaseGuard<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof baseGuardABI, TFunctionName>, 'abi'>
    | Omit<
        WriteContractUnpreparedArgs<typeof baseGuardABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: baseGuardABI,
    ...config,
  } as unknown as WriteContractArgs<typeof baseGuardABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function prepareWriteBaseGuard<
  TAbi extends readonly unknown[] = typeof baseGuardABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: baseGuardABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link guardABI}__.
 */
export function getGuard(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: guardABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link guardABI}__.
 */
export function readGuard<
  TAbi extends readonly unknown[] = typeof guardABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: guardABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link guardABI}__.
 */
export function writeGuard<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof guardABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof guardABI, TFunctionName>, 'abi'>,
) {
  return writeContract({
    abi: guardABI,
    ...config,
  } as unknown as WriteContractArgs<typeof guardABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link guardABI}__.
 */
export function prepareWriteGuard<
  TAbi extends readonly unknown[] = typeof guardABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: guardABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function getGuardManager(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: guardManagerABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function writeGuardManager<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof guardManagerABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof guardManagerABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: guardManagerABI,
    ...config,
  } as unknown as WriteContractArgs<typeof guardManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function prepareWriteGuardManager<
  TAbi extends readonly unknown[] = typeof guardManagerABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: guardManagerABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function watchGuardManagerEvent<
  TAbi extends readonly unknown[] = typeof guardManagerABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: guardManagerABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function getIerc165(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function readIerc165<
  TAbi extends readonly unknown[] = typeof ierc165ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: ierc165ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function getIMulticall3(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iMulticall3ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function readIMulticall3<
  TAbi extends readonly unknown[] = typeof iMulticall3ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iMulticall3ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function writeIMulticall3<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iMulticall3ABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iMulticall3ABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: iMulticall3ABI,
    ...config,
  } as unknown as WriteContractArgs<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function prepareWriteIMulticall3<
  TAbi extends readonly unknown[] = typeof iMulticall3ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iMulticall3ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iProxyCreationCallbackABI}__.
 */
export function getIProxyCreationCallback(
  config: Omit<GetContractArgs, 'abi'>,
) {
  return getContract({ abi: iProxyCreationCallbackABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iProxyCreationCallbackABI}__.
 */
export function writeIProxyCreationCallback<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof iProxyCreationCallbackABI,
          TFunctionName
        >,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof iProxyCreationCallbackABI,
          TFunctionName
        >,
        'abi'
      >,
) {
  return writeContract({
    abi: iProxyCreationCallbackABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof iProxyCreationCallbackABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iProxyCreationCallbackABI}__.
 */
export function prepareWriteIProxyCreationCallback<
  TAbi extends readonly unknown[] = typeof iProxyCreationCallbackABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iProxyCreationCallbackABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iSignatureValidatorABI}__.
 */
export function getISignatureValidator(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iSignatureValidatorABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iSignatureValidatorABI}__.
 */
export function readISignatureValidator<
  TAbi extends readonly unknown[] = typeof iSignatureValidatorABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iSignatureValidatorABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function getModuleManager(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: moduleManagerABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function readModuleManager<
  TAbi extends readonly unknown[] = typeof moduleManagerABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: moduleManagerABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function writeModuleManager<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof moduleManagerABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof moduleManagerABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: moduleManagerABI,
    ...config,
  } as unknown as WriteContractArgs<typeof moduleManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function prepareWriteModuleManager<
  TAbi extends readonly unknown[] = typeof moduleManagerABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: moduleManagerABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function watchModuleManagerEvent<
  TAbi extends readonly unknown[] = typeof moduleManagerABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: moduleManagerABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link nativeCurrencyPaymentFallbackABI}__.
 */
export function getNativeCurrencyPaymentFallback(
  config: Omit<GetContractArgs, 'abi'>,
) {
  return getContract({ abi: nativeCurrencyPaymentFallbackABI, ...config })
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link nativeCurrencyPaymentFallbackABI}__.
 */
export function watchNativeCurrencyPaymentFallbackEvent<
  TAbi extends readonly unknown[] = typeof nativeCurrencyPaymentFallbackABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: nativeCurrencyPaymentFallbackABI,
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function getOwnable(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function readOwnable<
  TAbi extends readonly unknown[] = typeof ownableABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: ownableABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function writeOwnable<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof ownableABI, TFunctionName>, 'abi'>
    | Omit<
        WriteContractUnpreparedArgs<typeof ownableABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: ownableABI,
    ...config,
  } as unknown as WriteContractArgs<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function prepareWriteOwnable<
  TAbi extends readonly unknown[] = typeof ownableABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: ownableABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function watchOwnableEvent<
  TAbi extends readonly unknown[] = typeof ownableABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: ownableABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function getOwnerManager(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ownerManagerABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function readOwnerManager<
  TAbi extends readonly unknown[] = typeof ownerManagerABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: ownerManagerABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function writeOwnerManager<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof ownerManagerABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof ownerManagerABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: ownerManagerABI,
    ...config,
  } as unknown as WriteContractArgs<typeof ownerManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function prepareWriteOwnerManager<
  TAbi extends readonly unknown[] = typeof ownerManagerABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: ownerManagerABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function watchOwnerManagerEvent<
  TAbi extends readonly unknown[] = typeof ownerManagerABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: ownerManagerABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link counterTestABI}__.
 */
export function getCounterTest(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: counterTestABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link counterTestABI}__.
 */
export function readCounterTest<
  TAbi extends readonly unknown[] = typeof counterTestABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: counterTestABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link counterTestABI}__.
 */
export function writeCounterTest<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof counterTestABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof counterTestABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: counterTestABI,
    ...config,
  } as unknown as WriteContractArgs<typeof counterTestABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link counterTestABI}__.
 */
export function prepareWriteCounterTest<
  TAbi extends readonly unknown[] = typeof counterTestABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: counterTestABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link counterTestABI}__.
 */
export function watchCounterTestEvent<
  TAbi extends readonly unknown[] = typeof counterTestABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: counterTestABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link registryABI}__.
 */
export function getRegistry(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: registryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link registryABI}__.
 */
export function readRegistry<
  TAbi extends readonly unknown[] = typeof registryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: registryABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link registryABI}__.
 */
export function writeRegistry<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof registryABI, TFunctionName>, 'abi'>
    | Omit<
        WriteContractUnpreparedArgs<typeof registryABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: registryABI,
    ...config,
  } as unknown as WriteContractArgs<typeof registryABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link registryABI}__.
 */
export function prepareWriteRegistry<
  TAbi extends readonly unknown[] = typeof registryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: registryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link registryABI}__.
 */
export function watchRegistryEvent<
  TAbi extends readonly unknown[] = typeof registryABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: registryABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link registryFactoryABI}__.
 */
export function getRegistryFactory(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: registryFactoryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link registryFactoryABI}__.
 */
export function readRegistryFactory<
  TAbi extends readonly unknown[] = typeof registryFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: registryFactoryABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link registryFactoryABI}__.
 */
export function writeRegistryFactory<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof registryFactoryABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof registryFactoryABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: registryFactoryABI,
    ...config,
  } as unknown as WriteContractArgs<typeof registryFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link registryFactoryABI}__.
 */
export function prepareWriteRegistryFactory<
  TAbi extends readonly unknown[] = typeof registryFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: registryFactoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link registryFactoryABI}__.
 */
export function watchRegistryFactoryEvent<
  TAbi extends readonly unknown[] = typeof registryFactoryABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: registryFactoryABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link registryRouterABI}__.
 */
export function getRegistryRouter(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: registryRouterABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link registryRouterABI}__.
 */
export function readRegistryRouter<
  TAbi extends readonly unknown[] = typeof registryRouterABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: registryRouterABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link registryRouterABI}__.
 */
export function writeRegistryRouter<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof registryRouterABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof registryRouterABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: registryRouterABI,
    ...config,
  } as unknown as WriteContractArgs<typeof registryRouterABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link registryRouterABI}__.
 */
export function prepareWriteRegistryRouter<
  TAbi extends readonly unknown[] = typeof registryRouterABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: registryRouterABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link registryRouterABI}__.
 */
export function watchRegistryRouterEvent<
  TAbi extends readonly unknown[] = typeof registryRouterABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: registryRouterABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link safeABI}__.
 */
export function getSafe(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: safeABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link safeABI}__.
 */
export function readSafe<
  TAbi extends readonly unknown[] = typeof safeABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: safeABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link safeABI}__.
 */
export function writeSafe<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof safeABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof safeABI, TFunctionName>, 'abi'>,
) {
  return writeContract({
    abi: safeABI,
    ...config,
  } as unknown as WriteContractArgs<typeof safeABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link safeABI}__.
 */
export function prepareWriteSafe<
  TAbi extends readonly unknown[] = typeof safeABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: safeABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link safeABI}__.
 */
export function watchSafeEvent<
  TAbi extends readonly unknown[] = typeof safeABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: safeABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iProxyABI}__.
 */
export function getIProxy(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iProxyABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iProxyABI}__.
 */
export function readIProxy<
  TAbi extends readonly unknown[] = typeof iProxyABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iProxyABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link safeProxyABI}__.
 */
export function getSafeProxy(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: safeProxyABI, ...config })
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function getSafeProxyFactory(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: safeProxyFactoryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function readSafeProxyFactory<
  TAbi extends readonly unknown[] = typeof safeProxyFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: safeProxyFactoryABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function writeSafeProxyFactory<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof safeProxyFactoryABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof safeProxyFactoryABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: safeProxyFactoryABI,
    ...config,
  } as unknown as WriteContractArgs<typeof safeProxyFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function prepareWriteSafeProxyFactory<
  TAbi extends readonly unknown[] = typeof safeProxyFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: safeProxyFactoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function watchSafeProxyFactoryEvent<
  TAbi extends readonly unknown[] = typeof safeProxyFactoryABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: safeProxyFactoryABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function getStdInvariant(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: stdInvariantABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function readStdInvariant<
  TAbi extends readonly unknown[] = typeof stdInvariantABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: stdInvariantABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function getStorageAccessible(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: storageAccessibleABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function readStorageAccessible<
  TAbi extends readonly unknown[] = typeof storageAccessibleABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: storageAccessibleABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function writeStorageAccessible<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof storageAccessibleABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof storageAccessibleABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: storageAccessibleABI,
    ...config,
  } as unknown as WriteContractArgs<typeof storageAccessibleABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function prepareWriteStorageAccessible<
  TAbi extends readonly unknown[] = typeof storageAccessibleABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: storageAccessibleABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link testABI}__.
 */
export function getTest(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: testABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link testABI}__.
 */
export function readTest<
  TAbi extends readonly unknown[] = typeof testABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: testABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link testABI}__.
 */
export function writeTest<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof testABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof testABI, TFunctionName>, 'abi'>,
) {
  return writeContract({
    abi: testABI,
    ...config,
  } as unknown as WriteContractArgs<typeof testABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link testABI}__.
 */
export function prepareWriteTest<
  TAbi extends readonly unknown[] = typeof testABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: testABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link testABI}__.
 */
export function watchTestEvent<
  TAbi extends readonly unknown[] = typeof testABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: testABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}
